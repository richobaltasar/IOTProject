#pragma checksum "D:\Tentakel\UII\Project\OEE Dashboard\IOTProject\WebIOT\WebIOT\Views\Conveyor\_MqttPanel.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "a685e9c93d3010a9092ba5cfd107163e92b41897"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Conveyor__MqttPanel), @"mvc.1.0.view", @"/Views/Conveyor/_MqttPanel.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\Tentakel\UII\Project\OEE Dashboard\IOTProject\WebIOT\WebIOT\Views\_ViewImports.cshtml"
using WebIOT;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Tentakel\UII\Project\OEE Dashboard\IOTProject\WebIOT\WebIOT\Views\_ViewImports.cshtml"
using WebIOT.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Tentakel\UII\Project\OEE Dashboard\IOTProject\WebIOT\WebIOT\Views\_ViewImports.cshtml"
using WebIOT.Function;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Tentakel\UII\Project\OEE Dashboard\IOTProject\WebIOT\WebIOT\Views\_ViewImports.cshtml"
using System.Diagnostics;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Tentakel\UII\Project\OEE Dashboard\IOTProject\WebIOT\WebIOT\Views\_ViewImports.cshtml"
using Microsoft.AspNetCore.Mvc;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"a685e9c93d3010a9092ba5cfd107163e92b41897", @"/Views/Conveyor/_MqttPanel.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"b9482a01595e1eed09bbb6581e85bd83ae9dc148", @"/Views/_ViewImports.cshtml")]
    public class Views_Conveyor__MqttPanel : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<MqqtModel>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/MqttWebSocket/mqttws31.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "a685e9c93d3010a9092ba5cfd107163e92b418974044", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
<div class=""slides"" style=""align-content:center;"">
    <!--Monitoring-->
    <div class=""col-sm-3 text-center"">
        <div class=""card shadow"" style=""height:270px;"">
            <div class=""card-body"">
                <h4 class=""card-title"">Speed Monitoring</h4>
                <hr />
                <p>RPM</p>
                <div class=""js-gauge speed gauge"" style=""margin-top:-40px;padding-top:0px;""></div>
            </div>
        </div>
    </div>
    <div class=""col-lg-2 col-xs-3 text-center"">
        <div class=""card shadow"" style=""height:270px;"">
            <div class=""card-body"">
                <h4 class=""card-title"">Control</h4>
                <hr />
                <p>Status</p>
                <div class=""led-red"" id=""LedStatus""></div>
                <br />
                <p>Start / Stop</p>
                <input id=""btnStart"" type=""checkbox""
                       checked=""checked"" data-toggle=""toggle""
                       data-on=""Start""
                      ");
            WriteLiteral(@" data-off=""Stop"" data-style=""ios""
                       data-onstyle=""success"" data-offstyle=""danger"" style=""text-align:center;"">
            </div>
        </div>
    </div>
    <div class=""col-sm-3 text-center"">
        <div class=""card shadow"" style=""height:270px;"">
            <div class=""card-body"">
                <h4 class=""card-title"">Temp. Monitoring</h4>
                <div class=""badge badge-info"" style=""border-radius:50% 10%;margin-top:-10px;"" id=""badgeSuhu"">
                    <strong style=""font-size:medium;"" id=""txtSuhu"">-5 *C</strong>
                </div>
                <div id=""chart-container""></div>
                
            </div>
        </div>
    </div>
    <div class=""col-sm-3 text-center"">
        <div class=""card shadow"" style=""height:270px;"">
            <div class=""card-body"">
                <h4 class=""card-title"">Voltage Monitoring</h4>
                <p style=""margin-top:20px;"">Volt</p>
                <div class=""js-gauge voltage gauge"" style=""ma");
            WriteLiteral(@"rgin-top:-40px;padding-top:0px;""></div>
            </div>
        </div>
    </div>
    <div class=""col-sm-3 text-center"">
        <div class=""card shadow"" style=""height:270px;"">
            <div class=""card-body"">
                <h4 class=""card-title"">Vibrate Monitoring</h4>
                <p style=""margin-top:20px;"">Hertz</p>
                <div class=""js-gauge vibrates gauge"" style=""margin-top:-40px;padding-top:0px;""></div>
                
            </div>
        </div>
    </div>
</div>

<!-- Button Event -->
<script type=""text/javascript"">
    var StateBtn = 2;
    $(function () {
        client.connect(options);
        $('#btnStart').change(async function () {
            //alert(""Change:"" + StateBtn);
            if ($(this).prop('checked') == true) {
                if (StateBtn != 0) {
                    await publish('0', 'IOTAPP/POWER', 2);
                    StateBtn = 0;
                }
                
            }
            else {
                i");
            WriteLiteral(@"f (StateBtn != 1) {
                    await publish('1', 'IOTAPP/POWER', 2);
                    StateBtn = 1;
                }
            }
        })
    });
</script>

<!--Speed Gauge-->
<script type=""text/javascript"">
    $('.speed').kumaGauge({
        value: Math.floor((0 * 99))
    });

    $('.speed').kumaGauge('update', {
        value: Math.floor((0 * 99))
    });

    $('.speed').kumaGauge({
        value: Math.floor((0 * 99)),
        fill: '#F34A53',
        gaugeBackground: '#1E4147',
        gaugeWidth: 10,
        showNeedle: false,
        label: {
            display: true,
            left: 'Min',
            right: 'Max',
            fontFamily: 'Helvetica',
            fontColor: '#1E4147',
            fontSize: '11',
            fontWeight: 'bold'
        }
    });
</script>

<!--Temp Gauge-->
<script type=""text/javascript"">
    FusionCharts.ready(function () {
        var updateAnnotation,
            chart = new FusionCharts({
             ");
            WriteLiteral(@"   type: 'thermometer',
                renderAt: 'chart-container',
                id: 'myThm',
                width: '200',
                height: '190',
                dataFormat: 'json',
                dataSource: {
                    ""chart"": {
                        ""theme"": ""fusion"",
                        ""lowerLimit"": ""-10"",
                        ""upperLimit"": ""0"",
                        ""decimals"": ""1"",
                        ""numberSuffix"": ""Â°C"",
                        ""showhovereffect"": ""1"",
                        ""thmFillColor"": ""#008ee4"",
                        ""showGaugeBorder"": ""1"",
                        ""gaugeBorderColor"": ""#008ee4"",
                        ""gaugeBorderThickness"": ""2"",
                        ""gaugeBorderAlpha"": ""30"",
                        ""thmOriginX"": ""100"",
                        ""chartBottomMargin"": ""20"",
                        ""valueFontColor"": ""#000000"",
                        ""theme"": ""fusion""
                    },
       ");
            WriteLiteral(@"             ""value"": ""-6"",
                },
                ""events"": {
                    ""initialized"": function (evt, arg) {
                        var dataUpdate = setInterval(function () {
                            var value,
                                prevTemp = FusionCharts.items[""myThm""].getData(),
                                mainTemp = (Math.random() * 10) * (-1),
                                diff = Math.abs(prevTemp - mainTemp);

                            diff = diff > 1 ? (Math.random() * 1) : diff;
                            if (mainTemp > prevTemp) {
                                value = prevTemp + diff;
                            } else {
                                value = prevTemp - diff;
                            }
                            $(""#txtSuhu"").text(Number(value).toFixed(2) + "" *C"");
                            FusionCharts.items[""myThm""].feedData(""&value="" + value);

                        }, 3000);

                        upd");
            WriteLiteral(@"ateAnnotation = function (evtObj, argObj) {
                            var code,
                                chartObj = evtObj.sender,
                                val = chartObj.getData(),
                                annotations = chartObj.annotations;

                            if (val >= -4.5) {
                                code = ""#00FF00"";
                                $(""#badgeSuhu"").removeClass(""badge-info"");
                                $(""#badgeSuhu"").removeClass(""badge-danger"");
                                $(""#badgeSuhu"").removeClass(""badge-success"");
                                $(""#badgeSuhu"").addClass(""badge-danger"");
                            }
                            else if (val <= -4.5 && val >= -6) {
                                code = ""#ff9900"";
                                $(""#badgeSuhu"").removeClass(""badge-info"");
                                $(""#badgeSuhu"").removeClass(""badge-danger"");
                                $(""#badgeS");
            WriteLiteral(@"uhu"").removeClass(""badge-success"");

                                $(""#badgeSuhu"").addClass(""badge-info"");

                            }
                            else {
                                code = ""#ff0000"";
                                $(""#badgeSuhu"").removeClass(""badge-info"");
                                $(""#badgeSuhu"").removeClass(""badge-danger"");
                                $(""#badgeSuhu"").removeClass(""badge-success"");
                                $(""#badgeSuhu"").addClass(""badge-success"");
                            }
                        };
                    },
                    ""renderComplete"": function (evt, arg) {
                        updateAnnotation(evt, arg);
                    },
                    ""realtimeUpdateComplete"": function (evt, arg) {
                        updateAnnotation(evt, arg);
                    }
                }
            })
                .render();
    });
</script>

<!--Tegangan Gauge-->
<script t");
            WriteLiteral(@"ype=""text/javascript"">
    $('.voltage').kumaGauge({
        value: Math.floor((Math.random() * 99) / 10)
    });

    $('.voltage').kumaGauge('update', {
        value: Math.floor((Math.random() * 99) / 10)
    });
    $('.voltage').kumaGauge({
        value: Math.floor((Math.random() * 99) / 10),
        fill: '#F34A53',
        gaugeBackground: '#1E4147',
        gaugeWidth: 10,
        showNeedle: false,
        label: {
            display: true,
            left: 'Min',
            right: 'Max',
            fontFamily: 'Helvetica',
            fontColor: '#1E4147',
            fontSize: '11',
            fontWeight: 'bold'
        }
    });
</script>

<!--Getaran-->
<script type=""text/javascript"">
    $('.vibrates').kumaGauge({
        value: Math.floor((0 * 99))
    });

    $('.vibrates').kumaGauge('update', {
        value: Math.floor((0 * 99))
    });
    $('.vibrates').kumaGauge({
        value: Math.floor((0 * 99)),
        fill: '#F34A53',
        gaugeBackgr");
            WriteLiteral(@"ound: '#1E4147',
        gaugeWidth: 10,
        showNeedle: false,
        label: {
            display: true,
            left: 'Min',
            right: 'Max',
            fontFamily: 'Helvetica',
            fontColor: '#1E4147',
            fontSize: '11',
            fontWeight: 'bold'
        }
    });
</script>

<!--MQTT Function-->
<script type=""text/javascript"">

    var client = new Messaging.Client(""");
#nullable restore
#line 267 "D:\Tentakel\UII\Project\OEE Dashboard\IOTProject\WebIOT\WebIOT\Views\Conveyor\_MqttPanel.cshtml"
                                  Write(Model.Host);

#line default
#line hidden
#nullable disable
            WriteLiteral("\", ");
#nullable restore
#line 267 "D:\Tentakel\UII\Project\OEE Dashboard\IOTProject\WebIOT\WebIOT\Views\Conveyor\_MqttPanel.cshtml"
                                                Write(Model.Port);

#line default
#line hidden
#nullable disable
            WriteLiteral(@", ""myclientid_"" + parseInt(Math.random() * 100, 10));

    client.onConnectionLost = async function (responseObject) {
        await client.connect(options);
    };

    client.onMessageArrived = async function (message) {
        if (message.destinationName == """);
#nullable restore
#line 274 "D:\Tentakel\UII\Project\OEE Dashboard\IOTProject\WebIOT\WebIOT\Views\Conveyor\_MqttPanel.cshtml"
                                   Write(Model.Topic);

#line default
#line hidden
#nullable disable
            WriteLiteral("/KONVEYOR\") {\r\n            var newVal = await Math.floor((message.payloadString)) / 10;\r\n            $(\'.speed\').kumaGauge(\'update\', {\r\n                value: newVal\r\n            });\r\n        }\r\n        else if (message.destinationName == \"");
#nullable restore
#line 280 "D:\Tentakel\UII\Project\OEE Dashboard\IOTProject\WebIOT\WebIOT\Views\Conveyor\_MqttPanel.cshtml"
                                        Write(Model.Topic);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"/LED"") {
            //alert(StateBtn);
            if (message.payloadString == 1) {
                $(""#LedStatus"").removeClass(""led-red"");
                $(""#LedStatus"").addClass(""led-green"");
                
                if (StateBtn != 1) {
                    StateBtn = 1;
                    $('#btnStart').prop('checked', false).change();
                    
                }
            }
            else {
                //alert(StateBtn);
                $(""#LedStatus"").removeClass(""led-green"");
                $(""#LedStatus"").addClass(""led-red"");
                if (StateBtn != 0) {
                    StateBtn = 0;
                    $('#btnStart').prop('checked', true).change();
                }
                //$('#btnStart').prop('checked', true).change();
                //StateBtn = true;
            }
        }
        else if (message.destinationName == """);
#nullable restore
#line 304 "D:\Tentakel\UII\Project\OEE Dashboard\IOTProject\WebIOT\WebIOT\Views\Conveyor\_MqttPanel.cshtml"
                                        Write(Model.Topic);

#line default
#line hidden
#nullable disable
            WriteLiteral("/TEGANGAN\") {\r\n            var newVal = Math.floor((message.payloadString)) / 10;\r\n            $(\'.voltage\').kumaGauge(\'update\', {\r\n                value: newVal\r\n            });\r\n        }\r\n        else if (message.destinationName == \"");
#nullable restore
#line 310 "D:\Tentakel\UII\Project\OEE Dashboard\IOTProject\WebIOT\WebIOT\Views\Conveyor\_MqttPanel.cshtml"
                                        Write(Model.Topic);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"/GETARAN"") {
            var newVal = Math.floor((message.payloadString));
            $('.vibrates').kumaGauge('update', {
                value: newVal
            });
        }
    };

    var options = {
        timeout: 3,
        onSuccess: async function () {
            await client.subscribe('");
#nullable restore
#line 321 "D:\Tentakel\UII\Project\OEE Dashboard\IOTProject\WebIOT\WebIOT\Views\Conveyor\_MqttPanel.cshtml"
                               Write(Model.Topic);

#line default
#line hidden
#nullable disable
            WriteLiteral("/KONVEYOR\', { qos: 2 });\r\n            await client.subscribe(\'");
#nullable restore
#line 322 "D:\Tentakel\UII\Project\OEE Dashboard\IOTProject\WebIOT\WebIOT\Views\Conveyor\_MqttPanel.cshtml"
                               Write(Model.Topic);

#line default
#line hidden
#nullable disable
            WriteLiteral("/LED\', { qos: 2 });\r\n            await client.subscribe(\'");
#nullable restore
#line 323 "D:\Tentakel\UII\Project\OEE Dashboard\IOTProject\WebIOT\WebIOT\Views\Conveyor\_MqttPanel.cshtml"
                               Write(Model.Topic);

#line default
#line hidden
#nullable disable
            WriteLiteral("/TEGANGAN\', { qos: 2 });\r\n            await client.subscribe(\'");
#nullable restore
#line 324 "D:\Tentakel\UII\Project\OEE Dashboard\IOTProject\WebIOT\WebIOT\Views\Conveyor\_MqttPanel.cshtml"
                               Write(Model.Topic);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"/GETARAN', { qos: 2 });
        },
        onFailure: async function (message) {
            await client.connect(options);
        }
    };
    //Creates a new Messaging.Message Object and sends it to the HiveMQ MQTT Broker
    var publish = async function (payload, topic, qos) {
        //Send your message (also possible to serialize it as JSON or protobuf or just use a string, no limitations)
        var message = new Messaging.Message(payload);
        message.destinationName = topic;
        message.qos = qos;
        await client.send(message);
    }
</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<MqqtModel> Html { get; private set; }
    }
}
#pragma warning restore 1591
